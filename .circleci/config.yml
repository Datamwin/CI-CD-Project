version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      #Add parameter here
      id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID}"
         
    steps:
      - run:
          name: Destroy environment ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
          command: |
            #aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
            echo "Destroying environment: << parameters.id >> "
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}


      # - run:
      #     name: Destroy frontend
      #     when: on_fail
      #     command: |
      #         aws s3 rm s3://udapeople-<<parameters.id>>--recursive
      #         #aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
              
          

            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      id: 
        type: string   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #curl -v --insecure https://kvdb.io/YLFopcbut3GscoH7bgoJnc/migration_${CIRCLE_WORKFLOW_ID:0:7}

            # SUCCESS = $(curl --insecure https://kvdb.io/ YLFopcbut3GscoH7bgoJnc/migration_${CIRCLE_WORKFLOW_ID:0:7})
            # if(( $SUCCESS==1 )); 
            # then
            #   cd ~/project/backend
            #   npm install
            #   npm run migration:revert
            # #  Add revert code here. You can find this in the Getting Started section.
            #   # exit 1
            # fi
            SUCCESS=$(curl --insecure  https://kvdb.io/YLFopcbut3GscoH7bgoJnc/migration_<<parameters.id>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

  install_ansible:
    description: Install Ansible
    steps:
    - run:
        name: Install Ansible
        command: |
          sudo apt update
          sudo apt install -y python3 python3-pip
          python3 -m pip install --user ansible

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install -g n
            sudo n 13.8.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
    

  test-frontend:
    docker:
      - image:
          circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test


                
  test-backend:
    docker:
      - image:
          circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image:
          circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: Scan front-end
         command: |
           cd frontend
           npm install
           npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image:
          circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure 
      #python:3.7-alpine3.11     

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [91:27:45:6c:bc:80:8b:ff:1c:02:df:aa:69:f2:ed:a0]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar
            apk add --update gzip
            apk add python curl
            pip install awscli
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            

            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env

            cd .circleci/ansible 
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml 


      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}     

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0 #cimg/node:15.0.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install -g npm
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt 
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
              curl -v --insecure https://kvdb.io/YLFopcbut3GscoH7bgoJnc/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
# #      # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend
            apk add --update ansible
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl 

            #npm install
            #pip install awscli
            # apk add --update tar
            # apk add --update gzip
            # apk add --nodejs
            
            
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$( aws ec2 describe-instances \
            \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}        
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # - install_awscli
      # - install_ansible
      # - install_nodejs
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: [91:27:45:6c:bc:80:8b:ff:1c:02:df:aa:69:f2:ed:a0]
      #attach workspace
      - attach_workspace:
          at: ~/ 
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Install dependencies
          command: |
            # your code here
            #apk add --update --no-cache tar gzip nodejs npm tree aws-cli ansible curl rsync openssh
            #cd backend
            apk add --update tar gzip nodejs npm ansible curl aws-cli python3 
            apk add --update openssh-server
            
            
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i --legacy-peer-deps
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -vvv -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7} 

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: cimg/base:stable 
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            # your code here
            #apk add --update tar
            #apk add --update gzip
            #pip install awscli
            #apk add --update ansible 
      #- run:
         # name: Get backend url
         # command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "$BACKEND_IP"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> app_url.txt
            echo ${API_URL}
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0

            else
              exit 1
            fi
      #Here's where you will add some code to rollback on failure 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7} 

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli   
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      #Here's where you will add some code to rollback on failure 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7} 

  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              # Fetch the Old workflow ID
              export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}" 

        
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
                echo "deleting old stack ${OldWorkflowID}"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                echo "old stack deleted"
              else
                echo "No old stack to delete"
              fi
                   
                 
            
          #cat old_stack.txt
          #export OldWorkflowID="${cat old_stack.txt}"
          # - run:
          #   name: Remove old stacks and files
          #   command: |
          #     #echo "${OldWorkflowID}"> old_stack.txt
              

workflows:
  build_workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]    
